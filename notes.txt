The data structure is like, there is one database, and three collections in it. 
collections/modles are: User, Post, Categories.

User model: 
attributes: 
username, email, password, profilepic

Post model: 
attributes: 
title, desc, photo, username, Categories (type array)

Categories model: 
attributes: name


register: 
in auth, the register uses post method, ie register route pe raw json data of email, password denge and use post krdenge to the database. ie mongo me add krdenge. (get bhi le skte the, but post request lia kyuki get is used only to fetch some data.)
// for encryption: use bcrypt.
bcrypt is a async function, define the salt, and use 
to generate salt: 
saltRounds = int. 

bcrypt.genSalt(saltRounds, (err,salt)=>{
    salt generated.
})

or salt = bcrypt.salt(saltRounds)

bcypt.hash(plainPassword, salt, (err,hash)=>{
    // hash generated.
})

## error codes. 200 -> ok, 400-> error , 401 -> not allowed

Context Api : 
i. Make folder Context
ii. make Context.js , Actions.js , Reducer.js files. 

Context.js: 
i. define an initial state as an object with some variables. like user:null, after doing a function, we update tis user to use anywhere.
ii. createContext(initial_state); 
iii. make a context provider and wrap the app (in index.js)  to use initial state in every component of app

Actions: 
Now what will happen after submitting the login page, its gonaa send the data (username and password) to the server. 
The fetching could be successful : update the initial state and use it anywhere in the map.
the fetching is failure: show error , do not update the initial state.

all these 3 actions are defined in actions.js

// Reducer: in the Reducer, we define what to send or what to update the state variables. 
const Reducer = function(state, action){
    if(action.type == "a type defined in Action.js"){
        return {
            changed state; 
        }
    }
    else if ...
    else...
}
export default Reducer. 


*************************** useRef hook ***********************************
-> it is almost similar to useState hook with the difference of that when we chage the state, it will not rerender the page. 
(NOTE: on changing the state, page rerenders which causes the useEffect to run again.ie useEffect will run every time any state changes.)
 
const temp = useRef('initial val'); // this is like a object which has the key-val pair->  'current': 'setValue'
to change the state of temp,  we do temp.current = change. and on changing, it will not rerender
useRef is also used to get html tags (like document.querySelector in js); 
const myRef = useRef(); 
just use ref={myRef} in the html tag. and  myRef.current is now the tag


